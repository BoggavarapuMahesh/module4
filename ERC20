// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";
import "hardhat/console.sol";

contract DegenGamingToken is ERC20, Ownable, ERC20Burnable {

    struct GameItem {
        string name;
        uint256 price;
    }

    GameItem[] public gameItems;

    constructor() ERC20("Degen Gaming Token", "DGT") {
        gameItems.push(GameItem("Power Sword", 200));
        gameItems.push(GameItem("Magic Wand", 100));
        gameItems.push(GameItem("Health Potion", 75));
    }

    function mintTokens(address to, uint256 amount) public onlyOwner {
        _mint(to, amount);
    }

    function transferTokens(address recipient, uint256 amount) external {
        require(balanceOf(msg.sender) >= amount, "Insufficient balance");
        _transfer(msg.sender, recipient, amount);
    }

    function checkBalance() external view returns (uint256) {
        return balanceOf(msg.sender);
    }

    function burnTokens(uint256 amount) external {
        require(balanceOf(msg.sender) >= amount, "Insufficient balance");
        _burn(msg.sender, amount);
    }

    function redeemGameItem(uint256 choice) external {
        require(choice < gameItems.length, "Invalid selection");

        GameItem storage item = gameItems[choice];
        require(balanceOf(msg.sender) >= item.price, "Insufficient balance");

        _transfer(msg.sender, owner(), item.price);
    }

    function getGameItemCount() external view returns (uint256) {
        return gameItems.length;
    }

    function getGameItem(uint256 index) external view returns (string memory, uint256) {
        require(index < gameItems.length, "Invalid index");

        GameItem storage item = gameItems[index];
        return (item.name, item.price);
    }
}
